Problem:
Find the kth largest element in an unsorted array. Note that it is the kth largest element in the sorted order, not the kth distinct element.

Example 1:
Input: [3,2,1,5,6,4] and k = 2
Output: 5

Example 2:
Input: [3,2,3,1,2,4,5,5,6] and k = 4
Output: 4

Note:
You may assume k is always valid, 1 ≤ k ≤ array's length.

solution:
Approach 1:
sort an array first and then return the Kth element from the end.
time complexity: O(nlogn)
space complexity: O(n) 
(in the solution of leetcode, time complexity is O(1) instead of O(n). However, I think O(n) is correct because "sorted" requires space to create a new list of the same size as the input list。
------------------------------------------------------------------
class Solution:
    def findKthLargest(self, nums, k):
        return sorted(nums)[-k]

if __name__ == "__main__":
    nums = [3.1, 2, 3, 5.5, 4.2, 1]
    o = Solution()
    print(o.findKthLargest(nums, 2))
-------------------------------------------------------------------
Approach 2:
The idea is to init a heap "the smallest element first", and add all elements from the array into this heap one by one keeping the size of the heap always less or equal to k. That would results in a heap containing k largest elements of the array.

The head of this heap is the answer, i.e. the kth largest element of the array.

The time complexity of adding an element in a heap of size k is O(logk), and we do it N times that means O(Nlogk) time complexity for the algorithm.

In Python there is a method nlargest in heapq library which has the same O(Nlogk) time complexity and reduces the code to one line.

This algorithm improves time complexity, but one pays with O(k) space complexity.

heapq.nlargest(n, iterable, key=None)
Return a list with the n largest elements from the dataset defined by iterable. key, if provided, specifies a function of one argument that is used to extract a comparison key from each element in iterable (for example, key=str.lower). Equivalent to: sorted(iterable, key=key, reverse=True)[:n].
-------------------------------------------------------------------
import heapq
class Solution:
    def findKthLargest(self, nums, k):
        return heapq.nlargest(k, nums)[-1]

if __name__ == "__main__":
    nums = [3.1, 2, 3, 5.5, 4.2, 1]
    o = Solution()
    print(o.findKthLargest(nums, 2))

--------------------------------------------------------------------
Approach 3: 
quik select

